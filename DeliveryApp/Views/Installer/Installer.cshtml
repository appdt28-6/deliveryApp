
@{
    ViewBag.Title = "Instaladores Activos";
}

<div class="banner">
    <h2>
        <a href="#">Instaladores</a>
    </h2>
</div>

<div class="blank">
    <div class="blank-page">


        @(Html.Kendo().Grid<DeliveryApp.Models.INSTALLER>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(c => c.inst_id).Hidden();
          columns.Bound(c => c.inst_name).Title("Nombre de Instalador");
          columns.Bound(c => c.inst_phone).Title("Telefono");
          columns.Bound(c => c.inst_mail).Title("Email").Hidden();
          columns.Bound(c => c.inst_role).Title("Rol").EditorTemplateName("_Role");
          columns.Command(command => { command.Edit().Text("Editar"); command.Destroy().Text("Eliminar"); }).Width(180);
      })
      .ToolBar(toolbar =>
      {
          toolbar.Create().Text("Nuevo");
          toolbar.Excel().Text("");
          toolbar.Pdf().Text("");
      })
     .Editable(editable => editable.Mode(GridEditMode.InLine).DisplayDeleteConfirmation("¿Seguro que quiere eliminar este Instalador?"))
     .Pageable(pager => pager
    .Messages(messages => messages
    .Display("{0} a {1}. Total de: {2}")
    .Empty("Sin registros")))
     .Filterable(f => f
            .Messages(m => m
                .Info("Mostrar registros con:")
                .Filter("Filtrar")
                .Clear("Limpiar")
                .IsTrue("y verdadero")
                .IsFalse("y falso")
                .And("y")
                .Or("o")
            )
            .Operators(o => o
                .ForString(fs => fs
                    .Contains("contiene")
                    .DoesNotContain("no contiene")
                    .EndsWith("termina con")
                    .IsEqualTo("es igual a")
                    .IsNotEqualTo("no es igual a")
                    .StartsWith("empieza con")
                )
                .ForNumber(fs => fs
                    .IsEqualTo("es igual a")
                    .IsGreaterThan("es mayor a")
                    .IsGreaterThanOrEqualTo("es mayor o igual a")
                    .IsLessThan("es menor que")
                    .IsLessThanOrEqualTo("es menor o igual a")
                    .IsNotEqualTo("no es igual a")
                )
                .ForDate(fs => fs
                    .IsEqualTo("es igual a")
                    .IsGreaterThan("es mayor a")
                    .IsGreaterThanOrEqualTo("es mayor o igual a")
                    .IsLessThan("es menor que")
                    .IsLessThanOrEqualTo("es menor o igual a")
                    .IsNotEqualTo("no es igual a")
                )
            )
        )
      .Scrollable()
      .DataSource(dataSource => dataSource
          .Ajax()
          .Model(model => model.Id(p => p.inst_id))
          .Read(read => read.Action("INSTALLER_Read", "Installer"))
          .Create(create => create.Action("INSTALLER_Create", "Installer"))
          .Update(update => update.Action("INSTALLER_Update", "Installer"))
          .Destroy(destroy => destroy.Action("INSTALLER_Destroy", "Installer"))
      ).HtmlAttributes(new { style = "height: 480px" })
        )
</div>
</div>
